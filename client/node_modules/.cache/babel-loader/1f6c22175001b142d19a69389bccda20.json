{"ast":null,"code":"import set from \"./set.js\";\nexport default function intersection(values) {\n  for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    others[_key - 1] = arguments[_key];\n  }\n\n  values = new Set(values);\n  others = others.map(set);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    out: for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = others[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var other = _step2.value;\n\n          if (!other.has(value)) {\n            values.delete(value);\n            continue out;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return values;\n}","map":{"version":3,"sources":["/Users/kevinchen/Desktop/WSU_Fall2020/Data Science/Project/FIFA-project(server)/code-ch23/node_modules/d3-array/src/intersection.js"],"names":["set","intersection","values","others","Set","map","out","value","other","has","delete"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,UAAhB;AAEA,eAAe,SAASC,YAAT,CAAsBC,MAAtB,EAAyC;AAAA,oCAARC,MAAQ;AAARA,IAAAA,MAAQ;AAAA;;AACtDD,EAAAA,MAAM,GAAG,IAAIE,GAAJ,CAAQF,MAAR,CAAT;AACAC,EAAAA,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAWL,GAAX,CAAT;AAFsD;AAAA;AAAA;;AAAA;AAGtDM,IAAAA,GAHsD,EAGjD,qBAAoBJ,MAApB,8HAA4B;AAAA,UAAjBK,KAAiB;AAAA;AAAA;AAAA;;AAAA;AAC/B,8BAAoBJ,MAApB,mIAA4B;AAAA,cAAjBK,KAAiB;;AAC1B,cAAI,CAACA,KAAK,CAACC,GAAN,CAAUF,KAAV,CAAL,EAAuB;AACrBL,YAAAA,MAAM,CAACQ,MAAP,CAAcH,KAAd;AACA,qBAASD,GAAT;AACD;AACF;AAN8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOhC;AAVqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWtD,SAAOJ,MAAP;AACD","sourcesContent":["import set from \"./set.js\";\n\nexport default function intersection(values, ...others) {\n  values = new Set(values);\n  others = others.map(set);\n  out: for (const value of values) {\n    for (const other of others) {\n      if (!other.has(value)) {\n        values.delete(value);\n        continue out;\n      }\n    }\n  }\n  return values;\n}\n"]},"metadata":{},"sourceType":"module"}