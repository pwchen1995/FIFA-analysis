{"ast":null,"code":"import _objectSpread from\"/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA7/code-ch23/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA7/code-ch23/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA7/code-ch23/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA7/code-ch23/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA7/code-ch23/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA7/code-ch23/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA7/code-ch23/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA7/code-ch23/client/node_modules/@babel/runtime/helpers/esm/inherits\";//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\nimport React from'react';import AppMode from'./../AppMode.js';import RoundsTable from'./RoundsTable.js';import RoundForm from'./RoundForm.js';import FloatingButton from'./FloatingButton.js';var Rounds=/*#__PURE__*/function(_React$Component){_inherits(Rounds,_React$Component);//Initialize a Rounds object based on local storage\nfunction Rounds(){var _this;_classCallCheck(this,Rounds);_this=_possibleConstructorReturn(this,_getPrototypeOf(Rounds).call(this));_this.addRound=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(newData){var url,res,msg;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url='/rounds/'+_this.props.userObj.id;_context.next=3;return fetch(url,{headers:{'Accept':'application/json','Content-Type':'application/json'},method:'POST',body:JSON.stringify(newData)});case 3:res=_context.sent;_context.next=6;return res.text();case 6:msg=_context.sent;if(res.status!=200){alert(\"An error occurred when attempting to add new round to database: \"+msg);_this.props.changeMode(AppMode.ROUNDS);}else{_this.props.refreshOnUpdate(AppMode.ROUNDS);}case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.editRound=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newData){var url,res,msg;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:url='/rounds/'+_this.props.userObj.id+'/'+_this.props.userObj.rounds[_this.state.editId]._id;_context2.next=3;return fetch(url,{headers:{'Accept':'application/json','Content-Type':'application/json'},method:'PUT',body:JSON.stringify(newData)});case 3:res=_context2.sent;_context2.next=6;return res.text();case 6:msg=_context2.sent;if(res.status!=200){alert(\"An error occurred when attempting to add new round to database: \"+msg);_this.props.changeMode(AppMode.ROUNDS);}else{_this.props.refreshOnUpdate(AppMode.ROUNDS);}case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();_this.deleteRound=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:case\"end\":return _context3.stop();}}},_callee3);}));_this.setDeleteId=function(val){_this.setState({deleteId:val});};_this.setEditId=function(val){_this.setState({editId:val});};_this.state={deleteId:\"\",editId:\"\"};return _this;}//componentDidMount -- After the component moutns, obtain current user's \n//rounds from the server and push them into component state\n// componentDidMount = async () => {\n//     let url = \"/rounds/\" + this.props.userObj.id;\n//     let res = await fetch(url, {method: 'GET'});\n//     if (res.status != 200) {\n//         let msg = await res.text();\n//         alert(\"There was an error obtaining rounds data for this user: \" \n//         + msg);\n//         return;\n//     } \n//     let body = await res.json();\n//     body = JSON.parse(body);\n//     alert(\"in componentDidMount with GET results: \" + body);\n//     this.setState({rounds: body}, this.props.changeMode(AppMode.ROUNDS));\n// }\n//addRound -- Given an object newData containing a new round, use the \n//server POST route to add the new round to the database. If the add is\n//successful, call on the refreshOnUpdate() method to force the parent\n//App component to refresh its state from the database and re-render itself,\n//allowing the change to be propagated to the Rounds table. Then switch\n//the mode back to AppMode.ROUNDS since the user is done adding a round.\n_createClass(Rounds,[{key:\"render\",//render -- Conditionally render the Rounds mode page as either the rounds\n//table, the rounds form set to obtain a new round, or the rounds form set\n//to edit an existing round.\nvalue:function render(){var _this2=this;switch(this.props.mode){case AppMode.ROUNDS:return React.createElement(React.Fragment,null,React.createElement(RoundsTable,{rounds:this.props.userObj.rounds,setEditId:this.setEditId,setDeleteId:this.setDeleteId,deleteRound:this.deleteRound,changeMode:this.props.changeMode,menuOpen:this.props.menuOpen}),React.createElement(FloatingButton,{handleClick:function handleClick(){return _this2.props.changeMode(AppMode.ROUNDS_LOGROUND);},menuOpen:this.props.menuOpen,icon:\"fa fa-plus\"}));case AppMode.ROUNDS_LOGROUND:return React.createElement(RoundForm,{mode:this.props.mode,startData:\"\",saveRound:this.addRound});case AppMode.ROUNDS_EDITROUND:var thisRound=_objectSpread({},this.props.userObj.rounds[this.state.editId]);thisRound.date=thisRound.date.substr(0,10);if(thisRound.seconds<10){thisRound.seconds=\"0\"+thisRound.seconds;}delete thisRound.SGS;return React.createElement(RoundForm,{mode:this.props.mode,startData:thisRound,saveRound:this.editRound});}}}]);return Rounds;}(React.Component);export default Rounds;","map":{"version":3,"sources":["/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA7/code-ch23/client/src/components/Rounds.js"],"names":["React","AppMode","RoundsTable","RoundForm","FloatingButton","Rounds","addRound","newData","url","props","userObj","id","fetch","headers","method","body","JSON","stringify","res","text","msg","status","alert","changeMode","ROUNDS","refreshOnUpdate","editRound","rounds","state","editId","_id","deleteRound","setDeleteId","val","setState","deleteId","setEditId","mode","menuOpen","ROUNDS_LOGROUND","ROUNDS_EDITROUND","thisRound","date","substr","seconds","SGS","Component"],"mappings":"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","sourcesContent":["//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from './../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor() {\n        super();\n        this.state = {deleteId: \"\",\n                      editId: \"\"};           \n    }\n\n    //componentDidMount -- After the component moutns, obtain current user's \n    //rounds from the server and push them into component state\n    // componentDidMount = async () => {\n    //     let url = \"/rounds/\" + this.props.userObj.id;\n    //     let res = await fetch(url, {method: 'GET'});\n    //     if (res.status != 200) {\n    //         let msg = await res.text();\n    //         alert(\"There was an error obtaining rounds data for this user: \" \n    //         + msg);\n    //         return;\n    //     } \n    //     let body = await res.json();\n    //     body = JSON.parse(body);\n    //     alert(\"in componentDidMount with GET results: \" + body);\n    //     this.setState({rounds: body}, this.props.changeMode(AppMode.ROUNDS));\n    // }\n\n    //addRound -- Given an object newData containing a new round, use the \n    //server POST route to add the new round to the database. If the add is\n    //successful, call on the refreshOnUpdate() method to force the parent\n    //App component to refresh its state from the database and re-render itself,\n    //allowing the change to be propagated to the Rounds table. Then switch\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            alert(\"An error occurred when attempting to add new round to database: \"    \n            + msg);\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round in the database. \n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.state.editId]._id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            alert(\"An error occurred when attempting to add new round to database: \" \n            + msg);\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\n    deleteRound = async () => {\n        //TO DO: Fill this in\n    }\n \n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.setState({deleteId: val});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.setState({editId: val});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    <RoundsTable \n                        rounds={this.props.userObj.rounds}\n                        setEditId={this.setEditId}\n                        setDeleteId={this.setDeleteId}\n                        deleteRound={this.deleteRound}\n                        changeMode={this.props.changeMode}\n                        menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                let thisRound = {...this.props.userObj.rounds[this.state.editId]};\n                thisRound.date = thisRound.date.substr(0,10);\n                if (thisRound.seconds < 10) {\n                    thisRound.seconds = \"0\" + thisRound.seconds;\n                } \n                delete thisRound.SGS;\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={thisRound} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n"]},"metadata":{},"sourceType":"module"}